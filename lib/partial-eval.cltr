(def-fun! constant? (value)
  (or (number? value)
      (and (sequence? value) (every? constant? value))))

(def-fun! emit-+ (&rest values)
  (cond
    ((every? constant? values) (apply + values))
    (#t (list* + values))))

(def-fun! emit-- (&rest values)
  (cond
    ((every? constant? values) (apply - values))
    (#t (list* - values))))

(def-op! emit-vau static-env (env-var vau-list &rest body)
  (let (vau-env (make-env static-env))
    (map (lambda (binding)
           (eval (list def! binding (make-placeholder binding))))
         vau-list)
    (map (rcurry eval vau-env) body)))

(def-op! emit-eval callsite-env (expr-code env-code)
  (let (expr (eval expr-code callsite-env)
        env  (eval env-code callsite-env))
    (cond
      ((eql? env callsite-env) (print "direct") (eval expr env))
      ((print (eql? env global-env)) (print "global") (eval expr env))
      (#t (print "fallback") (list eval expr-code env-code)))))

(def-fun! peval (form)
  (let (peval-env (make-env global-env))
    (with-env peval-env
      (def! + emit-+)
      (def! - emit--)
      (def! eval emit-eval))
    (eval form peval-env)))
