;;; TODO: Structs here.
(def-fun! emit (code dynamic-in)
  (list :dynamic dynamic-in code))
(def-fun! dynamic? (value)
  (and? (sequence? value)
        (eql? (car value) :dynamic)))
(def! static? (complement dynamic?))
;;; List of environments that this dynamic code side effects or is affected by
(def-fun! dynamic-in (dynamic)
  (second dynamic))
(def-fun! dynamic-code (dynamic)
  (third dynamic))
(def! dynamic-pure? (compose empty? dynamic-in))
(def! dynamic-impure? (complement dynamic-pure?))

;;; Should be internal to peval to discourage external use.
(def-op! quote #ignore (x) x)

(def-fun! finalize (tree)
  (cond
    ((dynamic? tree) (dynamic-code tree))
    (#t (list quote tree))))

(def! peval-prims (list))
(def-fun! peval-prim? (obj)
  (member? obj peval-prims))

(def! shadowed-prims (list))
(def-fun! shadowed-prim? (comb)
  (if (assoc comb shadowed-prims)
      #t
      #f))
(def-fun! shadowing-prim (obj)
  (cdr (assoc obj shadowed-prims)))

(def-op! def-peval-fun! env (shadowing name vau-list &rest body)
  (eval (list* def-fun! name vau-list body) env)
  (push! (eval name env) peval-prims)
  (push! (cons (eval shadowing env) (eval name env)) shadowed-prims))

(def-op! def-peval-op! env (shadowing name env-var vau-list &rest body)
  (eval (list* def-op! name env-var vau-list body) env)
  (push! (eval name env) peval-prims)
  (push! (cons (eval shadowing env) (eval name env)) shadowed-prims))

(def-fun! make-math-prim (shadowing)
  (lambda (&rest values)
    (cond
      ((all? static? values) (apply shadowing values))
      (#t (emit (list* shadowing (map finalize values))
                (apply append (map dynamic-in (filter dynamic? values))))))))

(def-fun! make-bin-prim (shadowing)
  (lambda (a b)
    (cond
      ((and? (static? a) (static? b)) (shadowing a b))
      (#t (emit (list shadowing (finalize a) (finalize b))
                (apply append (map dynamic-in (filter dynamic? values))))))))

(def-op! def-math-prim! env (shadowing name)
  (dyn-def-in! env name (make-math-prim (eval shadowing env)))
  (push! (eval name env) peval-prims)
  (push! (cons (eval shadowing env) (eval name env)) shadowed-prims))

(def-op! def-bin-prim! env (shadowing name)
  (dyn-def-in! env name (make-bin-prim (eval shadowing env)))
  (push! (eval name env) peval-prims)
  (push! (cons (eval shadowing env) (eval name env)) shadowed-prims))

(def-math-prim! + emit-+)
(def-math-prim! - emit--)
(def-math-prim! * emit-*)
(def-math-prim! / emit-/)

(def-bin-prim! rem emit-rem)
(def-bin-prim! =? emit-=?)
(def-bin-prim! >? emit->?)
(def-bin-prim! >=? emit->=?)
(def-bin-prim! <? emit-<?)
(def-bin-prim! <=? emit-<=?)

(def-peval-op! if emit-if denv (condition then else)
  (def! condition-val (smart-eval condition denv))
  (if (static? condition-val)
      (if condition-val
          (smart-eval then denv)
          (smart-eval else denv))
      (let (then-val (smart-eval then denv)
            else-val (smart-eval else denv))
        (emit (list if (finalize condition-val)
                    (finalize then-val)
                    (finalize else-val))
              (apply append
                     (map dynamic-in
                          (filter dynamic?
                                  (list condition-val then-val else-val))))))))

;; These may be dynamic in the value of target-env-val, not what it is dynamic in.
(def-peval-op! def-in! emit-def-in! denv (target-env name value)
  (def! target-env-val (smart-eval target-env denv))
  (def! value-val (smart-eval value denv))
  ;; FIXME: May side effect global envs
  ;; TODO: Omit emitted code when safe
  (if (static? target-env-val)
      (if (static? value-val)
          (do (dyn-def-in! target-env-val name value-val)
              (emit (list def-in! target-env-val name value-val)
                 (list target-env-val)))
          ;; FIXME: This is only necessary if value-val is an impure
          ;; invocation; otherwise the value should propogate
          (do (dyn-def-in! target-env-val name (emit name (list target-env-val)))
              (emit (list def-in! target-env-val name
                          (finalize value-val))
                 (cons target-env-val (dynamic-in value-val)))))
      (if (static? value-val)
          (emit (list def-in! (finalize target-env-val) name value-val)
                (dynamic-in target-env-val)) ; TODO: verify correct
          (emit (list def-in! (finalize target-env-val) name (finalize value-val))
                (append (dynamic-in target-env-val) ; TODO: verify correct
                               (dynamic-in value-val))))))

(def-peval-op! set-in! emit-set-in! denv (target-env name value)
  (def! target-env-val (smart-eval target-env denv))
  (def! value-val (smart-eval value denv))
  ;; FIXME: May side effect global envs
  (if (static? target-env-val)
      (if (static? value-val)
          (do (dyn-set-in! target-env-val name value-val)
              (emit (list set-in! target-env-val name value-val)
                 (list target-env-val)))
          ;; FIXME: This is only necessary if value-val is an impure
          ;; invocation; otherwise the value should propogate
          (do (dyn-set-in! target-env-val name (emit name (list target-env-val)))
              (emit (list set-in! target-env-val name
                          (finalize value-val))
                 (cons target-env-val (dynamic-in value-val)))))
      (if (static? value-val)
          (emit (list set-in! (finalize target-env-val) name value-val)
                (dynamic-in target-env-val)) ; TODO: verify correct
          (emit (list set-in! (finalize target-env-val) name (finalize value-val))
                (append (dynamic-in target-env-val) ; TODO: verify correct
                        (dynamic-in value-val))))))

(def-peval-fun! wrap emit-wrap (obj)
  (if (dynamic? obj)
      (emit (if (eql? (first (dynamic-code obj))
                      unwrap)
                (rest (dynamic-code obj))
                (list wrap (dynamic-code obj)))
            (dynamic-in obj))
      (wrap obj)))

;;; Inlines and recurses
(def-fun! smart-eval-call (form env)
  ;; TODO: Also inline functions being passed constant envs.
  (def! comb (smart-eval (first form) env))
  (if (dynamic? comb)
      (emit (list* (dynamic-code comb) (map finalize (rest form)))
            (apply append
                   (map dynamic-in
                        (cons comb (filter dynamic? (rest form))))))
      (if (operative? comb)
          (if (or? (peval-prim? comb) (shadowed-prim? comb))
              (eval (if (shadowed-prim? comb)
                        (list* (shadowing-prim comb) (rest form))
                        (list* comb (rest form)))
                    env)
              (if (primitive? comb)
                  (do (print "WARNING: Unsupported partial eval primitive!")
                      (print comb)
                    (emit (map1 finalize form)))
                  (inline (list* comb (rest form)) env)))
          (let (args (map (rcurry smart-eval env) (rest form)))
            (if (or? (peval-prim? comb) (shadowed-prim? comb)
                     (and? (pure? comb) (all? static? args)))
                (eval (list* (unwrap (if (shadowed-prim? comb)
                                         (shadowing-prim comb)
                                         comb))
                             args)
                      env)
                (let (final-args (map finalize args))
                  (emit (list* comb final-args)
                        (map (rcurry binding-env env) final-args))))))))

(def-fun! smart-eval (form env)
  (cond
    ((null? form) form)
    ((list? form) (smart-eval-call form env))
    ;; FIXME: Global values may change at runtime; how do we tell when
    ;; to emit a dynamic lookup here?  Values may be 'constant' (cause
    ;; recompile if changed) or 'dynamic' (so that we use emit instead
    ;; of eval here).  This distinction must be made.  Perhaps infer
    ;; via whole-program analysis?
    (#t (eval form env))))

(def-peval-op! vau emit-vau static-env (env-var vau-list &rest body)
  (def! vau-env (make-env static-env))
  (map (lambda (binding)
         (dyn-def-in! vau-env binding (emit binding (list vau-env))))
       (cons env-var vau-list))
  ;; TODO: Handle explicitly introduced but non-escaping environments
  (def! body-results (map (rcurry smart-eval vau-env) body))
  (def! outer-envs (compose (curry filter (complement (curry eql? vau-env)))
                            dynamic-in))
  (def! impure-here? (complement (compose empty? outer-envs)))
  (if (any? (conjoin dynamic? impure-here?) body-results)
      (emit (list* vau env-var vau-list (map finalize body-results))
            (apply append (map outer-envs (filter dynamic? body-results))))
      (let (result (eval (list* vau env-var vau-list (map1 finalize body-results)) vau-env))
        (declare-pure! result #t)
        result)))

(def-peval-op! nvau emit-nvau static-env (name env-var vau-list &rest body)
  (eval (list* emit-vau env-var vau-list body) static-env))

(def-peval-fun! eval emit-eval (expr env)
  (if (and? (static? expr) (static? env))
      (smart-eval expr env)
      (emit (list eval (finalize expr) (finalize env))
            (append (map dynamic-in (filter dynamic? (list expr env)))))))

(def-fun! map-code-tree (pred tree)
  (pred-case tree
             (dynamic?
              (emit (map-code-tree pred (dynamic-code tree))
                    (dynamic-in tree)))
             (sequence?
              (map (curry map-code-tree pred) tree))
             (otherwise
              (pred tree))))

(def-fun! replace-code-tree (tree old-atom new-atom)
  (map-code-tree (lambda (x)
                   (if (eql? old-atom x)
                       new-atom
                       x))
                 tree))

;;; Produce code that may be substituted for the supplied operator
;;; invocation.
(def-fun! inline (call-form outer-env)
  (def! op (if (operative? (first call-form))
               (first call-form)
               (unwrap (first call-form))))
  (def! env (make-env (vau-env op)))
  (def-fun! perform-binding (vau-list values)
    (cond
      ((empty? vau-list) #t)
      ((eql? (first vau-list) ((vau #ignore (x) x) &rest))
       (dyn-def-in! env (second vau-list) values))
      (#t
       (dyn-def-in! env (first vau-list) (first values))
       (perform-binding (rest vau-list) (rest values)))))
  
  (perform-binding (cons (vau-denv-var op) (vau-args op)) (cons outer-env (rest call-form)))

  (def! results
      (replace-code-tree (map (rcurry smart-eval env)
                              (vau-body op))
                         outer-env (list get-current-env)))
  
  (cond ((=? (length results) 1)
         (first results))
        ((any? dynamic? results)
         (emit (list* do (map finalize results))
               (apply append (map dynamic-in (filter dynamic? results)))))
        (list* do results)))

(def-fun! peval (form)
  (let (peval-env (make-env global-env))
    ;; primitives
    ;; TODO: automate
    (def-in! peval-env + emit-+)
    (def-in! peval-env - emit--)
    (def-in! peval-env =? emit-=?)
    (def-in! peval-env rem emit-rem)
    (def-in! peval-env eval emit-eval)
    (def-in! peval-env vau emit-vau)
    (def-in! peval-env if emit-if)
    (def-in! peval-env def-in! emit-def-in!)
    (def-in! peval-env set-in! emit-set-in!)
    (def-in! peval-env wrap emit-wrap)
    (def-in! peval-env name-vau! emit-name-vau!)

    (replace-code-tree (finalize (smart-eval form peval-env))
                       peval-env global-env)))

(def-op! pe #ignore (form)
  (peval form))
