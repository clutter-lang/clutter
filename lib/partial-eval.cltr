;;; TODO: Structs here.
(def-fun! emit (code)
  (cons :dynamic code))
(def-fun! dynamic? (value)
  (and? (sequence? value)
        (eql? (car value) :dynamic)))
(def! static? (complement dynamic?))
(def-fun! dynamic-code (dynamic)
  (cdr dynamic))

;;; Should be internal to peval to discourage external use.
(def-op! quote #ignore (x) x)

(def-fun! finalize (tree)
  (cond
    ((dynamic? tree) (dynamic-code tree))
    ((or? (list? tree) (symbol? tree)) (list quote tree))
    (#t tree)))

(def! peval-prims (list))
(def-fun! peval-prim? (obj)
  (member? obj peval-prims))

(def! shadowed-prims (list))
(def-fun! shadowed-prim? (comb)
  (if (assoc comb shadowed-prims)
      #t
      #f))
(def-fun! shadowing-prim (obj)
  (cdr (assoc obj shadowed-prims)))

(def-op! def-peval-fun! env (shadowing name vau-list &rest body)
  (eval (list* def-fun! name vau-list body) env)
  (push! (eval name env) peval-prims)
  (push! (cons (eval shadowing env) (eval name env)) shadowed-prims))

(def-op! def-peval-op! env (shadowing name env-var vau-list &rest body)
  (eval (list* def-op! name env-var vau-list body) env)
  (push! (eval name env) peval-prims)
  (push! (cons (eval shadowing env) (eval name env)) shadowed-prims))

(def-fun! make-math-prim (shadowing)
  (lambda (&rest values)
    (cond
      ((all? static? values) (apply shadowing values))
      (#t (emit (list* shadowing (map finalize values)))))))

(def-fun! make-bin-prim (shadowing)
  (lambda (a b)
    (cond
      ((and? (static? a) (static? b)) (shadowing a b))
      (#t (emit (list shadowing (finalize a) (finalize b)))))))

(def-op! def-math-prim! env (shadowing name)
  (dyn-def-in! env name (make-math-prim (eval shadowing env)))
  (push! (eval name env) peval-prims)
  (push! (cons (eval shadowing env) (eval name env)) shadowed-prims))

(def-op! def-bin-prim! env (shadowing name)
  (dyn-def-in! env name (make-bin-prim (eval shadowing env)))
  (push! (eval name env) peval-prims)
  (push! (cons (eval shadowing env) (eval name env)) shadowed-prims))

(def-math-prim! + emit-+)
(def-math-prim! - emit--)
(def-math-prim! * emit-*)
(def-math-prim! / emit-/)

(def-bin-prim! rem emit-rem)
(def-bin-prim! =? emit-=?)
(def-bin-prim! >? emit->?)
(def-bin-prim! >=? emit->=?)
(def-bin-prim! <? emit-<?)
(def-bin-prim! <=? emit-<=?)

(def-peval-op! if emit-if denv (condition then else)
  (let (condition-val (smart-eval condition denv))
    (if (static? condition-val)
        (if condition-val
            (smart-eval then denv)
            (smart-eval else denv))
        (emit (list if (finalize condition-val)
                    (finalize (smart-eval then denv))
                    (finalize (smart-eval else denv)))))))

(def-peval-op! def-in! emit-def-in! denv (target-env name value)
  (let (target-env-val (smart-eval target-env denv)
        value-val (smart-eval value denv))
    ;; FIXME: May side effect global envs
    (when (static? target-env-val)
      (if (static? value-val)
          (dyn-def-in! target-env-val name value-val)
          (dyn-def-in! target-env-val name (emit name))))
    (emit (list def-in! (finalize target-env-val) name (finalize value-val)))))

(def-peval-op! set-in! emit-set-in! denv (target-env name value)
  (let (target-env-val (smart-eval target-env denv)
        value-val (smart-eval value denv))
    ;; FIXME: May side effect global envs
    (when (static? target-env-val)
      (if (static? value-val)
          (dyn-set-in! target-env-val name value)
          (dyn-set-in! target-env-val name (emit name))))
    (emit (list set-in! (finalize target-env-val) name (finalize value-val)))))

(def-peval-fun! wrap emit-wrap (obj)
  (cond
    ((dynamic? obj) (emit (list wrap (finalize obj))))
    (#t (wrap obj))))

(def-peval-fun! name-vau! emit-name-vau! (obj name)
  obj)

;;; Inlines and recurses
(def-fun! smart-eval-call (form env)
  ;; TODO: Also inline functions being passed constant envs.
  (let (comb (smart-eval (first form) env))
    (if (dynamic? comb)
        (emit (list* (finalize comb) (map finalize (rest form))))
        (if (operative? comb)
            (if (or? (peval-prim? comb) (shadowed-prim? comb))
                (eval (if (shadowed-prim? comb)
                          (list* (shadowing-prim comb) (rest form))
                          (list* comb (rest form)))
                      env)
                (if (primitive? comb)
                    (do (print "WARNING: Unsupported partial eval primitive!")
                        (print comb)
                      (emit form))
                    (inline (list* comb (rest form)) env)))
            (let (args (map (rcurry smart-eval env) (rest form)))
              (if (or? (peval-prim? comb) (shadowed-prim? comb)
                       (and? (pure? comb) (all? static? args)))
                  (eval (list* (unwrap (if (shadowed-prim? comb)
                                           (shadowing-prim comb)
                                           comb))
                               args)
                        env)
                  (emit (list* comb (map finalize args)))))))))

(def-fun! smart-eval (form env)
  (cond
    ((null? form) form)
    ((list? form) (smart-eval-call form env))
    ;; FIXME: Global values may change at runtime; how do we tell when
    ;; to emit a dynamic lookup here?
    ;; Values may be 'constant' (cause recompile if changed) or
    ;; 'dynamic' (so that we use emit instead of eval here).  This
    ;; distinction must be made.
    (#t (eval form env))))

(def-peval-op! vau emit-vau static-env (env-var vau-list &rest body)
  (def! vau-env (make-env static-env))
  (map (lambda (binding)
         (dyn-def-in! vau-env binding (emit binding)))
       (cons env-var vau-list))
  ;; TODO: Evaluate vau expr when pure
  ;; Pureness criteria:
  ;; - Accesses dynamic bindings in and below its own env only.
  ;; - Calls only pure functions (and fexprs?)
  (emit (list* vau env-var vau-list
               ;; FIXME: This performs badly due to redundant
               ;; traversal; verify necessity and improve.
               (replace-tree
                (map finalize
                     (map (rcurry smart-eval vau-env)
                          body))
                vau-env (list get-current-env)))))

(def-peval-fun! eval emit-eval (expr env)
  (if (and? (static? expr) (static? env))
      (smart-eval expr env)
      (emit (list eval (finalize expr) (finalize env)))))

;;; Produce code that may be substituted for the supplied operator
;;; invocation.
(def-fun! inline (call-form outer-env)
  (let (op (if (operative? (first call-form))
               (first call-form)
               (unwrap (first call-form))))
    (let (env (make-env (vau-env op)))
      (def-fun! perform-binding (vau-list values)
        (cond
          ((empty? vau-list) #t)
          ((eql? (first vau-list) ((vau #ignore (x) x) &rest))
           (dyn-def-in! env (second vau-list) values))
          (#t
           (dyn-def-in! env (first vau-list) (first values))
           (perform-binding (rest vau-list) (rest values)))))
      
      (perform-binding (cons (vau-denv-var op) (vau-args op)) (cons outer-env (rest call-form)))

      (let (results (map (rcurry smart-eval env)
                      (vau-body op)))
        (if (=? (length results) 1)
            (first results)
            (list* do results))))))

(def-fun! peval (form)
  (let (peval-env (make-env global-env))
    ;; primitives
    ;; TODO: automate
    (def-in! peval-env + emit-+)
    (def-in! peval-env - emit--)
    (def-in! peval-env =? emit-=?)
    (def-in! peval-env rem emit-rem)
    (def-in! peval-env eval emit-eval)
    (def-in! peval-env vau emit-vau)
    (def-in! peval-env if emit-if)
    (def-in! peval-env def-in! emit-def-in!)
    (def-in! peval-env set-in! emit-set-in!)
    (def-in! peval-env wrap emit-wrap)
    (def-in! peval-env name-vau! emit-name-vau!)

    (finalize (smart-eval form peval-env))))

(def-op! pe #ignore (form)
  (peval form))
