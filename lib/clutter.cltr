(def-var! %def!-expanders (list))

(def-var! cond
    (vau env (&rest forms)
         (if (eql? forms (list))
             #f
             (if (eval (car forms) env)
                 (eval (car (cdr forms)) env)
                 (eval (list* cond (cdr (cdr forms))) env)))))

(def-var! lambda
    (vau env (vau-list &rest body)
         (wrap (eval (list* vau #ignore vau-list body) env))))

(def-var! assoc
    (lambda (key alist)
      (if (eql? alist (list))
          #f
          (if (eql? key (car (car alist)))
              (car alist)
              (assoc key (cdr alist))))))

(def-var! mapcar
    (lambda (function values)
      (if (eql? (list) values)
          (list)
          (cons (function (car values)) (mapcar function (cdr values))))))

(def-var! let
    (vau env (clauses &rest body)
         (eval (list* (list* lambda (mapcar car clauses) body)
                      (mapcar (lambda (x) (car (cdr x))) clauses))
               env)))

(def-var! def!
    (vau env (place value)
         (cond
           (symbol? place) (eval (list def-var! place value) env)
           (cons? place)
           (let ((expander (assoc (car place) %def!-expanders)))
             (eval (list* (cdr expander) (eval value env) (cdr place))
                   env)))))

(def! %set!-specials (list))
(def! %set!-expanders (list))

(def! set!
    (vau env (variable value)
         (cond
           (symbol? variable)
           (let ((special (assoc variable %set!-specials)))
             (if special
                 ((cdr special) (eval value env))
                 (eval (list set-var! variable value) env)))

           (cons? variable)
           (let ((expander (assoc (car variable) %set!-expanders)))
             (eval (list* (cdr expander) (eval value env) (cdr variable)) env)))))

(def! push!
    (vau env (value place)
         (eval (list set! place (list cons value place))
               env)))

(def! def-def!-expander!
    (vau env (name combiner)
         (push! (cons name (eval combiner env)) %def!-expanders)))

(def-def!-expander! lookup
    (vau env (value symbol target-env)
         (eval (list def-lookup! (eval value env) symbol (eval target-env env))
               env)))

(def! current-env
    (vau env () env))

(def! def-ns!
    (vau env (name)
         (eval (list def! name (make-env env)) env)))

(def! with-ns
    (vau env (ns &rest body)
         (eval (list (list* lambda () body)) (eval ns env))))

(def! apply
    (vau env (combiner args)
         (eval (list* combiner (eval args env)) env)))

(def! def-set!-special!
    (vau env (variable function)
         (push! (cons variable (eval function env)) %set!-specials)))

(def! def-set!-expander!
    (vau env (name combiner)
         (push! (cons name (eval combiner env)) %set!-expanders)))

(def-set!-expander! lookup
    (vau env (value symbol target-env)
         (eval (list set-lookup! (eval value env) symbol (eval target-env env))
               env)))

(def! do
    (vau env (&rest body)
         (let ((last-value ()))
           (mapcar (lambda (exp) (set! last-value (eval exp env))) body)
           last-value)))

(def! when
    (vau env (test &rest body)
         (if (eval test env)
             (eval (list* do body) env)
             #f)))

(def! unless
    (vau env (test &rest body)
         (if (eval test env)
             #f
             (eval (list* do body) env))))

(def! anaphoric
    (vau env (var op test &rest body)
         (eval (list let (list (list var (eval test env)))
                     (list* op var body))
               env)))

(def! aif
    (vau env (var test then else)
         (eval (list anaphoric var if test then else) env)))

(def! awhen
    (vau env (var test &rest body)
         (eval (list* anaphoric var when test body) env)))

(def! aunless
    (vau env (var test &rest body)
         (eval (list* anaphoric var unless test body) env)))
