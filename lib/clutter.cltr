(def-var! def!
    (vau env (place value)
         (eval (list def-var! place value) env)))

(def! lambda
    (vau env (vau-list &rest body)
         (wrap (eval (list* vau #ignore vau-list body) env))))

(def! cond
    (vau env (&rest forms)
         (if (eql? forms (list))
             #f
             (if (eval (car forms) env)
                 (eval (car (cdr forms)) env)
                 (eval (list* cond (cdr (cdr forms))) env)))))

(def! mapcar
    (lambda (function values)
      (if (eql? (list) values)
          (list)
          (cons (function (car values)) (mapcar function (cdr values))))))

(def! push!
    (vau env (value place)
         (eval (list set! place (list cons (eval value env) place))
               env)))

(def! let
    (vau env (clauses &rest body)
         (eval (list* (list* lambda (mapcar car clauses) body)
                      (mapcar (lambda (x) (car (cdr x))) clauses))
               env)))

(def! apply
    (vau env (combiner args)
         (eval (list* combiner (eval args env)) env)))

(def! assoc
    (lambda (key alist)
      (if (eql? alist (list))
          #f
          (if (eql? key (car (car alist)))
              (car alist)
              (assoc key (cdr alist))))))

(def! %set!-specials (list))
(def! %set!-expanders (list))

(def! def-set!-special!
    (vau env (variable function)
         (push! (cons variable (eval function env)) %set!-specials)))

(def! def-set!-expander!
    (vau env (name combiner)
         (push! (cons name (eval combiner env)) %set!-expanders)))

(def! set!
    (vau env (variable value)
         (cond
           (symbol? variable)
           (let ((special (assoc variable %set!-specials)))
             (if special
                 ((cdr special) (eval value env))
                 (eval (list set-var! variable value) env)))

           (cons? variable)
           (let ((expander (assoc (car variable) %set!-expanders)))
             (if expander
                 (eval (list* (cdr expander) (eval value env) (cdr variable)) env))))))
