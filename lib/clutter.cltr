(def-in! ((vau env () env)) get-current-env
  (wrap (vau env () env)))

(def-in! (get-current-env) global-env
  (get-current-env))

(def-in! (get-current-env) empty-env
  (make-env))

(def-in! global-env def!
  (vau env (var value)
    (eval (list def-in! env var value) env)))

(def-in! global-env set!
  (vau env (var value)
    (eval (list set-in! env var value) env)))

(def! def-op!
 (vau env (name env-var vau-list &rest body)
   (eval (list def! name
               (list* nvau name env-var vau-list body))
         env)))

(def-op! dyn-def-in! dyn-env (env var value)
  (eval (list def-in!
              (list (unwrap eval) env dyn-env)
              (eval var dyn-env)
              (list (unwrap eval) value dyn-env))
        dyn-env))

(def-op! dyn-set-in! dyn-env (env var value)
    (eval (list set-in!
                (list (unwrap eval) env dyn-env)
                (eval var dyn-env)
                (list (unwrap eval) value dyn-env))
          dyn-env))

(def-op! lambda env (vau-list &rest body)
  (wrap (eval (list* vau #ignore vau-list body) env)))

(def-op! nlambda env (name vau-list &rest body)
  (wrap (eval (list* nvau name #ignore vau-list body) env)))

(def! fun-name
  (lambda (f)
    (vau-name (unwrap f))))

(def-op! def-fun! env (name lambda-list &rest body)
  (eval (list def! name
              (list* nlambda name lambda-list body))
        env))

(def-op! lookup env (var lookup-env)
  (eval var (eval lookup-env env)))

(def-fun! map1 (function values)
  (if (empty? values)
      (list)
      (cons (function (car values)) (map function (cdr values)))))

(def-fun! apply1 (function args)
  (eval (cons (unwrap function) args) (get-current-env)))

(def-fun! apply (function &rest args)
  (eval (list* (unwrap function) (append (butlast args 1) (last args)))
        empty-env))

(def-fun! zip (&rest sequences)
  (if (empty? (first sequences))
      (list)
      (list* (map1 first sequences) (apply zip (map1 rest sequences)))))

(def-fun! curry (function &rest first-args)
  (nlambda curried (&rest last-args)
    (apply1 function (append first-args last-args))))

(def-fun! rcurry (function &rest last-args)
  (nlambda curried (&rest first-args)
    (apply1 function (append first-args last-args))))

(def-fun! map (function &rest lists)
  (map1 (curry apply1 function) (apply zip lists)))

(def-fun! reduce (function initial values)
  (if (empty? values)
      initial
      (reduce function (function initial (car values)) (cdr values))))

(def-fun! flatten (sequence)
  (reduce append (list) sequence))

(def-fun! constantly (value)
  (lambda (&rest #ignore) value))

(def-op! destructuring-bind dyn-env (vau-list values &rest body)
  (let (env (make-env dyn-env))
    (def-fun! perform-binding (vau-list values)
      (cond
        ((empty? vau-list) #t)
        ((eql? (first vau-list) ((vau #ignore (x) x) &rest))
         (dyn-def-in! env (second vau-list) values))
        (#t
         (dyn-def-in! env (first vau-list) (first values))
         (perform-binding (rest vau-list) (rest values)))))

    (perform-binding vau-list (eval values dyn-env))
    (eval (cons do body) env)))

(def-op! do env (&rest body)
  (if (eql? (length body) 1)
      (eval (first body) env)
      (eval (list (list* vau #ignore () body)) env)))

(def-op! cond env (&rest forms)
  (if (empty? forms)
      #f
      (if (eval (car (car forms)) env)
          (eval (list* do (cdr (car forms))) env)
          (eval (list* cond (cdr forms)) env))))

(def-fun! not (value)
  (if value #f #t))
(def! false? not)

(def! null? (curry eql? (list)))

(def-fun! compose (function &rest more-functions)
  (reduce (lambda (f g)
            (lambda (&rest args)
              (f (apply g args))))
          function
          more-functions))

(def-fun! conjoin (&rest predicates)
  (def-fun! conjunction (predicates value)
    (if (empty? predicates)
        #t
        (and? ((first predicates) value)
              (conjunction (rest predicates) value))))
  (curry conjunction predicates))

(def-fun! disjoin (&rest predicates)
  (def-fun! disjunction (predicates value)
    (if (empty? predicates)
        #f
        (or? ((first predicates) value)
             (conjunction (rest predicates) value))))
  (curry disjunction predicates))

(def! complement (curry compose not))

(def! empty? null?)

(def! not-false? (complement false?))

(def! not-empty? (complement empty?))

(def-fun! filter (predicate sequence)
  (if (empty? sequence)
      (list)
      (if (predicate (first sequence))
          (cons (first sequence) (filter predicate (rest sequence)))
          (filter predicate (rest sequence)))))


(def! first car)
(def! rest cdr)
(def-fun! nth (n sequence)
  (def-fun! rec (n seq)
    (if (<=? n 0)
        (car seq)
        (rec (- n 1) (cdr seq))))
  (rec n sequence))
(def! second (curry nth 1))
(def! third (curry nth 2))
(def! fourth (curry nth 3))
(def! fifth (curry nth 4))
(def! sixth (curry nth 5))
(def! seventh (curry nth 6))
(def! eighth (curry nth 7))
(def! ninth (curry nth 8))
(def! tenth (curry nth 9))

(def-fun! last (seq)
  (def! remainder (rest seq))
  (if (empty? remainder)
      (first seq)
      (last remainder)))

(def-fun! butlast (seq n)
  (if (>=? n (length seq))
      (list)
      (cons (first seq) (butlast (rest seq) n))))

(def-fun! even? (number)
  (=? (rem number 2) 0))

(def! odd? (complement even?))

(def-op! inc! env (var)
  (eval (list set! var (list + 1 var)) env))

(def-op! dec! env (var)
  (eval (list set! var (list - var 1)) env))

(def-op! let env (clauses &rest body)
  (eval (list*
         (list* lambda
                (filter ((lambda (x) (lambda (#ignore) (odd? (inc! x)))) 0)
                        clauses)
                body)
         (filter ((lambda (x) (lambda (#ignore) (even? (inc! x)))) 0)
                 clauses))
        env))

(def-op! letseq dyn-env (bindings &rest body)
  (let (env (make-env dyn-env))
    (if (null? bindings)
        (eval (cons do body) env)
        (do
         (dyn-def-in! env (car bindings) (eval (car (cdr bindings)) dyn-env))
         (eval (list* letseq (cdr (cdr bindings)) body) env)))))

(def-op! letrec dyn-env (bindings &rest body)
  (letseq (vars (filter (let (x 0) (lambda (#ignore) (odd? (inc! x)))) bindings)
           values (filter (let (x 0) (lambda (#ignore) (even? (inc! x)))) bindings)
           def-forms (cons do (map (lambda (var val) (list def! var val)) vars values)))
    (eval (list* let ()
                 def-forms
                 body)
          dyn-env)))

(def-op! letrecseq dyn-env (bindings &rest body)
  (eval (if (null? bindings)
            (list* letrec bindings body)
            (list letrec
                  (list (car bindings) (car (cdr bindings)))
                  (list* letrecseq (cdr (cdr bindings)) body)))
        dyn-env))

(def-op! when env (test &rest body)
  (if (eval test env)
      (eval (list* do body) env)
      #f))

(def-op! unless env (test &rest body)
  (if (eval test env)
      #f
      (eval (list* do body) env)))

(def-op! returning env (first &rest body)
  (let (return-val (eval first env))
    (map (rcurry eval env) body)
    return-val))

(def-op! push! env (value place)
  (eval (list set! place (list cons value place))
        env))

(def-fun! apply (function args)
  (eval (cons (unwrap function) args) (get-current-env)))

(def-fun! curry (function &rest first-args)
  (lambda (&rest last-args)
    (apply function (append first-args last-args))))

(def-fun! rcurry (function &rest last-args)
  (lambda (&rest first-args)
    (apply function (append first-args last-args))))

(def-fun! nth (n sequence)
  (if (=? n 0)
      (car sequence)
      (nth (- n 1) (cdr sequence))))

(def-fun! first (sequence)
  (car sequence))

(def-fun! second (sequence)
  (nth 1 sequence))

(def-fun! third (sequence)
  (nth 2 sequence))

(def-fun! fourth (sequence)
  (nth 3 sequence))

(def-fun! fifth (sequence)
  (nth 4 sequence))

(def-fun! rest (sequence)
  (cdr sequence))

(def-fun! last (sequence)
  (if (eql? (list) (cdr sequence))
      (car sequence)
      (last (cdr sequence))))

(def-fun! position (item sequence)
  (def-fun! position-helper (n item sequence)
    (if (empty? sequence)
        #f
        (if (eql? item (car sequence))
            n
            (position-helper (+ n 1) item (cdr sequence)))))
  (position-helper 0 item sequence))

(def-op! or? env (&rest expressions)
  (if (=? (length expressions) 0)
      #f
      (let (result (eval (first expressions) env))
        (if result
            result
            (eval (list* or? (rest expressions)) env)))))

(def-op! and? env (&rest expressions)
  (if (=? (length expressions) 0)
      #t
      (let (result (eval (first expressions) env))
        (if result
            (eval (list* and? (rest expressions)) env)
            #f))))

(def-fun! all? (predicate sequence)
  (apply (wrap and?) (map predicate sequence)))

(def-fun! any? (predicate sequence)
  (apply (wrap or?) (map predicate sequence)))

(def! sequence? list?)

(def-fun! call (function &rest args)
  (apply function args))

(def-fun! conjoin (predicate &rest more-predicates)
  (if (empty? more-predicates)
      predicate
      (letrec (helper
               (lambda (predicates value)
                 (if (empty? predicates)
                     #t
                     (and? ((car predicates) value)
                           (helper (cdr predicates) value)))))
        (curry helper (cons predicate more-predicates)))))

(def-fun! disjoin (predicate &rest more-predicates)
  (if (empty? more-predicates)
      predicate
      (letrec (helper
               (lambda (predicates value)
                 (if (empty? predicates)
                     #f
                     (or? ((car predicates) value)
                          (helper (cdr predicates) value)))))
        (curry helper (cons predicate more-predicates)))))

(def! atom? (disjoin boolean? symbol? keyword? number? string?))

(def-fun! compose (function &rest more-functions)
  (reduce (lambda (f g)
            (lambda (&rest args)
              (f (apply g args))))
          function
          more-functions))

(def-fun! sequence? (object)
  (list? object))

(def-fun! combiner? (object)
  (any? (rcurry call object) (list function? operative?)))

(def-fun! member? (item sequence)
  (if (>? (length sequence) 0)
      (if (eql? item (first sequence))
          sequence
          (member? item (rest sequence)))
      #f))

;;; Depth-first
(def-fun! map-tree (pred tree)
  (if (sequence? tree)
      (map (curry map-tree pred) tree)
      (pred tree)))

(def-op! case env (value &rest clauses)
  (def! actual-value (eval value env))
  (def-fun! process-clauses (clauses)
    (if (empty? clauses)
        #f
        (let (clause (first clauses))
          (if (or? (eql? (first clause) #t)
                   (eql? (eval (first clause) env)
                         actual-value))
              (eval (cons do (rest clause)) env)
              (process-clauses (rest clauses))))))
  (process-clauses clauses))

(def-op! pred-case env (value &rest clauses)
  (def! actual-value (eval value env))
  (def! pred-env (make-env env))
  (def-in! pred-env otherwise (constantly #t))
  (def-fun! process-clauses (clauses)
    (if (empty? clauses)
        #f
        (let (clause (first clauses))
          (if ((eval (first clause) pred-env) actual-value)
              (eval (cons do (rest clause)) env)
              (process-clauses (rest clauses))))))
  (process-clauses clauses))

(def-fun! replace-tree (tree old-value new-value)
  (if (and? (sequence? tree) (sequence? (rest tree)))
      (if (empty? tree)
          (list)
          (map (rcurry replace-tree old-value new-value) tree))
      (if (eql? tree old-value) new-value tree)))

(def-op! with-env callsite-env (target-env &rest body)
  (eval (list* do body) (eval target-env callsite-env)))

(def-op! module dyn-env (parent-envs &rest body)
  (let (env (apply make-env (map (rcurry eval dyn-env) parent-envs)))
    (map (rcurry eval env) body)
    env))

(def-op! provide! dyn-env (bindings parent-envs &rest body)
  (let (module-env (eval (list* module parent-envs body) dyn-env))
    (map (lambda (binding)
           (eval (list def-in! dyn-env binding (eval binding module-env)) dyn-env))
         bindings))
  bindings)

(def-op! providing-module dyn-env (bindings parent-envs &rest body)
  (eval (list module (list)
              (list* provide! bindings (map (curry eval dyn-env) parent-envs)
                     body))
        dyn-env))

(def-op! import-from! dyn-env (from-env &rest bindings)
  (let (env (eval from-env dyn-env))
    (map (lambda (binding)
           (let (var (if (list? binding) (car binding) binding)
                 val (list (unwrap eval) (if (list? binding) (car (cdr binding)) binding) env))
             (eval (list def-in! dyn-env var val) dyn-env)))
         bindings))
  bindings)

(def! anaphora
    (module (global-env)

            (def-op! anaphoric env (op var test &rest body)
              (eval (list let (list var (eval test env))
                          (list* op var body))
                    env))

            (def-op! aif env (var test then else)
              (eval (list anaphoric if var test then else) env))

            (def-op! awhen env (var test &rest body)
              (eval (list* anaphoric when var test body) env))

            (def-op! aunless env (var test &rest body)
              (eval (list* anaphoric unless var test body) env))

            (def-op! areturning env (var first &rest body)
              (eval (list* anaphoric returning var first body) env))

            ))

(def-fun! init-gensym ()
  (let (counter 0)
    (letrec (generator
             (lambda (prefix)
               (inc! counter)
               (let (symbol (intern (make-string prefix counter)))
                 (if (bound? symbol)
                     (generator)
                     symbol))))
       generator)))

(def! gensym (init-gensym))

(def-op! def-struct! env (name &rest slot-names)
  (letseq (str-name (symbol-name name)
                    keyword (make-keyword str-name))
          (dyn-def-in! env
                       (intern (make-string "make-" str-name))
                       (curry list keyword))
          (dyn-def-in! env
                       (intern (make-string str-name "?"))
                       (conjoin list? (compose (curry eql? keyword) first)))
          (reduce (lambda (counter name)
                    (dyn-def-in! env
                                 (intern (make-string str-name "-" name))
                                 (curry nth counter))
                    (+ counter 1))
                  1
                  (map symbol-name slot-names))
          name))

(def-fun! replace-in-tree (alist tree)
  (if (or? (empty? alist) (empty? tree))
      tree
      (let (assoc (assoc tree alist))
        (cond
          (assoc (cdr assoc))
          ((atom? tree) tree)
          (#t (cons (replace-in-tree alist (car tree))
                    (replace-in-tree alist (cdr tree))))))))

(def-fun! remove-duplicates (sequence)
  (reduce (lambda (acc x) (if (member? x acc)
                              acc
                              (cons x acc)))
          (list)
          sequence))

(def-fun! flatten-tree (tree)
  (let (list (list))
    (def-fun! traverse (tree)
      (when (not-empty? tree)
          (if (cons? tree)
              (do
               (traverse (car tree))
               (traverse (cdr tree)))
              (push! tree list))))
    (traverse tree)
    list))

(def-fun! find-by (pred sequence)
  (if (empty? sequence)
      (list)
      (if (pred (first sequence))
          (first sequence)
          (find-by pred (rest sequence)))))

(def-fun! map-tree (function tree)
  (if (empty? tree)
      (list)
      (if (cons? tree)
          (cons
           (map-tree function (car tree))
           (map-tree function (cdr tree)))
          (function tree))))

(def-fun! map-append (function &rest lists)
  (apply append
         (apply (curry map function) lists)))

(def-fun! assoc-by (test key alist)
  (if (empty? alist)
      #f
      (if (test key (car alist))
          (car alist)
          (assoc-by test key (cdr alist)))))

(def! assoc (curry assoc-by
                   (lambda (key pair)
                     (eql? key (car pair)))))

(def-fun! assoc-replace-by (test key new-value alist)
  (if (empty? alist)
      #f
      (if (test key (car alist))
          (cons (cons key new-value)
                (rest alist))
          (cons (car alist)
                (assoc-replace-by test key new-value (rest alist))))))

(def! assoc-replace (curry assoc-replace-by
                           (lambda (key pair)
                             (eql? key (car pair)))))

(def-fun! assoc-delete-by (test key alist)
  (if (empty? alist)
      #f
      (if (test key (car alist))
          (rest alist)
          (cons (car alist)
                (assoc-delete-by test key (rest alist))))))

(def! assoc-delete (curry assoc-delete-by
                          (lambda (key pair)
                            (eql? key (car pair)))))

(def-fun! plist-map (designator function plist)
  (let (counter-function
        (lambda ()
          (let (counter 0)
            (lambda (el)
              (inc! counter)
              (if (designator counter)
                  (function el)
                  el)))))
    (map (counter-function) plist)))

(def! plist-map-keys (curry plist-map odd?))

(def! plist-map-values (curry plist-map even?))

(def-fun! fibonacci (n)
  (if (<? n 2)
      n
      (+ (fibonacci (- n 1)) (fibonacci (- n 2)))))

(def-fun! factorial (n)
  (if (<? n 2)
      1
      (* n (factorial (- n 1)))))

(def! zero? (curry eql? 0))

(def-fun! take (n sequence)
  (if (zero? n)
      (list)
      (cons (car sequence) (take (- n 1) (cdr sequence)))))

(def-fun! drop (n sequence)
  (if (zero? n)
      sequence
      (drop (- n 1) (cdr sequence))))

(def-fun! split-at (n sequence)
  (cons (take n sequence)
        (drop n sequence)))

(def-fun! sort-by (function sequence)
  (def-fun! merge (left right)
    (cond
      ((empty? left) right)
      ((empty? right) left)
      ((function (car left) (car right))
       (cons (car left) (merge (cdr left) right)))
      (#t
       (cons (car right) (merge left (cdr right))))))
  (let (length (length sequence))
    (if (<? length 2)
        sequence
        (merge
         (sort-by function (take (div length 2) sequence))
         (sort-by function (drop (div length 2) sequence))))))

(def! sort (curry sort-by <?))

(def-fun! take-while (predicate sequence)
  (if (empty? sequence)
      (list)
      (if (predicate (car sequence))
          (cons (car sequence) (take-while predicate (cdr sequence)))
          (list))))

(def-fun! drop-while (predicate sequence)
  (if (empty? sequence)
      (list)
      (if (predicate (car sequence))
          (drop-while predicate (cdr sequence))
          sequence)))

(def-fun! span (predicate sequence)
  (cons (take-while predicate sequence) (drop-while predicate sequence)))

(def-fun! group-by (predicate sequence)
  (if (empty? sequence)
      (list)
      (let (rest (span (curry predicate (car sequence)) (cdr sequence)))
        (cons (cons (car sequence) (car rest)) (group-by predicate (cdr rest))))))

(def! group (curry group-by eql?))

(def-fun! fork (center &rest functions)
  (lambda (&rest args) (apply center (map call functions args))))