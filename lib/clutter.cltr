(def! lambda
    (vau env (vau-list &rest body)
         (wrap (eval (list* vau ignore vau-list body) env))))

(def! mapcar
    (lambda (function values)
      (if (eq (list) values)
          (list)
          (cons (function (car values)) (mapcar function (cdr values))))))

(def! let
    (vau env (clauses &rest body)
         (eval (list* (list* lambda (mapcar car clauses) body)
                      (mapcar (lambda (x) (car (cdr x))) clauses))
               env)))

(def! assoc
    (lambda (key alist)
      (if (eq alist (list))
          :f
          (if (eq key (car (car alist)))
              (car alist)
              (assoc key (cdr alist))))))

(def! %set-specials (list))

(def! def-set-special!
    (vau env (variable function)
         (set! %set-specials (cons (cons variable (eval function env))
                                   %set-specials))))

(def! set!
    (vau env (variable value)
         (let ((special (assoc variable %set-specials)))
           (if special
               ((cdr special) (eval value env))
               (eval (list set-var! variable value) env)))))
